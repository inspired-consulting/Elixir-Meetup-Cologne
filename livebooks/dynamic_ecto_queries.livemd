# Elixir

```elixir
Mix.install([
  {:ecto_sql, "~> 3.9"},
  {:ecto, "~> 3.9"},
  {:kino, "~> 0.8.1"},
  {:ecto_sqlite3, "~> 0.9.1"}
])
```

## Try it yourself!

[![Run in Livebook](https://livebook.dev/badge/v1/black.svg)](https://livebook.dev/run?url=https%3A%2F%2Fgithub.com%2Finspired-consulting%2FElixir-Meetup-Cologne%2Fblob%2Fmain%2Flivebooks%2Fdynamic_ecto_queries.livemd)

## Databse setup

```elixir
defmodule User do
  use Ecto.Schema
  @primary_key false
  schema "users" do
    field(:name, :string)
    field(:age, :integer)
  end
end

defmodule Repo do
  use Ecto.Repo, adapter: Ecto.Adapters.SQLite3, otp_app: :nothing
end

case Ecto.Repo.all_running() do
  [_ | _] -> Repo.stop()
  _ -> []
end

Repo.start_link(database: "anti-aging.db")

[
  "DROP TABLE IF EXISTS users",
  "CREATE TABLE users (name STRING, age INT)"
]
|> Enum.map(&Ecto.Adapters.SQL.query!(Repo, &1, []))

users = [
  %{name: "👶", age: 0},
  %{name: "🦖", age: 65_000_000},
  %{name: "🤠", age: 92},
  %{name: "👧", age: 12},
  %{name: "👩🏻", age: 42},
  %{name: "🦄", age: 101}
]

Repo.insert_all("users", users, [])
```

## Filter by age

```elixir
import Ecto.Query
max_age = 99
min_age = 21
query = from(u in User, where: u.age >= ^min_age and u.age <= ^max_age)
Repo.all(query) |> Kino.DataTable.new()
```

![](https://i.giphy.com/media/4PCNGBPKj6De08Fgsc/giphy.webp)

```elixir
defmodule BadExample do
  import Ecto.Query

  def by_age(min_age, max_age) do
    query = from(u in User, where: u.age > ^min_age and u.age < ^max_age)
    Repo.all(query) |> Kino.DataTable.new()
  end
end

BadExample.by_age(21, nil) |> Kino.DataTable.new()
```

![](https://i.giphy.com/media/Nxj5V2uURNzBt6TyWj/giphy.webp)

```elixir
defmodule UglyExample do
  import Ecto.Query

  def by_age(min_age, max_age) when is_nil(min_age) and is_nil(max_age) do
    query = from(u in User)
    Repo.all(query)
  end

  def by_age(min_age, max_age) when is_nil(min_age) do
    query = from(u in User, where: u.age <= ^max_age)
    Repo.all(query)
  end

  def by_age(min_age, max_age) when is_nil(max_age) do
    query = from(u in User, where: u.age >= ^min_age)
    Repo.all(query)
  end

  def by_age(min_age, max_age) do
    query = from(u in User, where: u.age <= ^max_age and u.age > ^min_age)
    Repo.all(query)
  end
end

UglyExample.by_age(21, nil) |> Kino.DataTable.new()
```

![](https://i.giphy.com/media/YaYUGMM8CYA02WW3je/giphy.webp)

```elixir
defmodule GoodExample do
  import Ecto.Query

  def by_age(min_age, max_age) do
    query = from(u in User)

    query
    |> maybe_add_min_age(min_age)
    |> maybe_add_max_age(max_age)
    |> Repo.all()
  end

  defp maybe_add_min_age(query, nil), do: query
  defp maybe_add_min_age(query, min_age), do: where(query, [u], u.age >= ^min_age)

  defp maybe_add_max_age(query, nil), do: query
  defp maybe_add_max_age(query, max_age), do: where(query, [u], u.age <= ^max_age)
end

GoodExample.by_age(21, nil) |> Kino.DataTable.new()
```

![](https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExYmIyNTM5ZWY4M2U2YmVhMGQzMzQzYTVmNDY3MWVlYmUyZDgyY2Q4YiZjdD1n/m5B4JzuoIrrcbibbnc/giphy.gif)
