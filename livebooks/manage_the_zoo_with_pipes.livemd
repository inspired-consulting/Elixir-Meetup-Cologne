# Manage the zoo with pipes

## Try it yourself!

[![Run in Livebook](https://livebook.dev/badge/v1/black.svg)](https://livebook.dev/run?url=https%3A%2F%2Fgithub.com%2Finspired-consulting%2FElixir-Meetup-Cologne%2Fblob%2Fmain%2Flivebooks%2Fmanage_the_zoo_with_pipes.livemd)

## Functions to categorize animals

```elixir
is_bird? = fn
  "🦉" -> true
  "🦩" -> true
  _other -> false
end

is_brown? = fn
  "🦉" -> true
  "🐻" -> true
  _other -> false
end
```

## We have the following animals in our zoo

```elixir
animals = ["🦉", "🦉", "🦩", "🦩", "🦩", "🐻", "🐻"]
```

## How many brown birds there are?

##### Filter all the birds

```elixir
birds = Enum.filter(animals, is_bird?)
```

##### Filter all brown animals from the birds

```elixir
brown_birds = Enum.filter(birds, is_brown?)
```

##### Count the brown birds and print the result

```elixir
"Number of brown birds: #{length(brown_birds)}"
```

## The pipe operator

The pipe operator is writen as `|>`. It links the result of the expression on the left site of the operator to the function on the left site. It does this by passing the result of the expression to the functions as first parameter. The following:

```elixir
IO.puts("These animals live in the zoo #{animals}")
```

Is therefore the same as this:

```elixir
"These animals live in the zoo #{animals}"
|> IO.puts()
```

## Compose the steps using pipes

With this in mind we can compose the steps to determine the number of brown birds with pipes.

```elixir
animals
|> Enum.filter(is_bird?)
|> Enum.filter(is_brown?)
|> length()
|> then(fn number_of_brown_birds -> "Number of brown birds: #{number_of_brown_birds}" end)
```

## Compose with pipes

Pipes are a great tool to compose functions that solve small proplems to solve bigger problems while keeping the code clean and easy to understand.

```elixir
count_brown = fn animals_to_count ->
  animals_to_count
  |> Enum.filter(is_brown?)
  |> length
end

print_count = fn count, category ->
  IO.puts("Number of #{category}: #{count}")
end

animals
|> length()
|> print_count.("animals")

animals
|> count_brown.()
|> print_count.("brown animals")

animals
|> Enum.filter(is_bird?)
|> count_brown.()
|> print_count.("brown birds")

animals
|> Enum.reject(is_bird?)
|> count_brown.()
|> print_count.("brown none-birds")
```

